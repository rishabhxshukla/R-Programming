View(concrete)
str(concrete)
hist(concrete$strength)
normalize <- function(x) {
return ((x - min(x)) / ((max(x)) - min(x)))
}
concrete_norm <- as.data.frame(lapply(concrete, normalize))
summary(concrete_norm$strength)
summary(concrete_norm$strength)
concrete_train <- concrete_norm[1 : 733, ]
concrete_test <- concrete_norm[744 : 1030, ]
pusyy eater
pussy eater
iris
iris1 = iris
iris1
iris1$Species = NULL
iris1
d = dist(isis1, method = "euclidean")
?hclust
d = dist(iris1, method = "euclidean")
?hclust
hfit - hclust(d, method = "average")
plot(hfit)
?cutree
iris
iris1 = iris
iris1
iris1$Species = NULL
iris1
d = dist(iris1, method = "euclidean")
?hclust
hfit = hclust(d, method = "average")
plot(hfit)
?cutree
grps = cutree(hfit, k=4)
grps
rect.hclust(hfit, k=4, border = "red")
install.packages("arulesviz")
#install.packages("arulesviz")
#install.packages("arules")
library(datasets)
library(arules)
library(arulesViz)
#Exploring the data
data(Groceries)
class(Groceries)
Groceries@itemInfo[1 : 20, ]
View(Groceries)
apply(Groceries@data[ , 10 : 20], 2, function(r)
paste(Groceries$itemInfo[r, "labels"], collapse = ", "))
itemsets <- apriori(Groceries, parameter = list(minlen=1, maxlen=1, support=0.02, target="frequent itemsets"))
apply(Groceries@data[ , 10 : 20], 2, function(r)
paste(Groceries$itemInfo[r, "labels"], collapse = ", "))
apply(Groceries@data[ , 10 : 20], 2, function(r)
paste(Groceries$itemInfo[r, "labels"], collapse = ", "))
#Creating a data frame
manager = c(1, 2, 3, 4, 5)
date = c("01/01/23", "02/02/23", "03/03/23", "04/04/23", "05/05/23")
country = c("US", "UK", "IN", "AU", "FR")
gender = c("M", "F", "F", "M", "F")
age = c(20, 22, 24, 26, 28)
company = data.frame(
manager,
date,
country,
gender,
age
)
#Printing the data frame
company
#Creating a data frame
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(
c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")
),
stringsAsFactors = FALSE
)
#Printing the data frame
empData
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(
c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")
),
stringsAsFactors = FALSE
)
#Printing the data frame
empData
#Printing separate rows
print(empData$id)
print(empData$name)
#Creating the data frame
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(
c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")
),
stringsAsFactors = FALSE
)
#Printing the data frame
empData
#Printing the Structure
str(empData)
#Printing separate columns
print(empData$id)
print(empData$name)
#Printing separate columns
print(empData$name[1, ])
#Printing separate columns
print(empData$name[1,])
#Printing individual rows
print(empData[1, ])
#Printing individual rows
print(empData[2, ])
summary(empData)
summary(empData$salary)
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
print(empData[1:3, ])
print(empData$name[ , 1])
print(empData$name[ , 2])
#Adding a new row to our data frame
#We use list since every element is of different type, so we cant use c function
empData <- list(6, "Nixon", 924.30, as.Date("2017-07-15"))
empData
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
#Printing the data frame
empData
#Adding a new row to our data frame
#We use list since every element is of different type, so we cant use c function
empData <- list(6, "Nixon", 924.30, as.Date("2017-07-15"))
empData
#Creating another data frame having original data frame columns
result = data.frame(
empData$id,
empData$salary
)
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
#Adding a new row to our data frame
#We use list since every element is of different type, so we cant use c function
nixon <- list(6, "Nixon", 924.30, as.Date("2017-07-15"))
rbind(empData, nixon)
empData
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
#Printing the data frame
empData
#Adding a new row to our data frame
#We use list since every element is of different type, so we cant use c function
nixon <- list(6, "Nixon", 924.30, as.Date("2017-07-15"))
rbind(empData, nixon)
empData
empData
#Adding a new column to our data frame
#Here we can use the c function, since every element is of same type
age <- c(20, 22, 24, 26, 28, 30)
cbind(empData, age)
#Adding a new column to our data frame
#Here we can use the c function, since every element is of same type
age <- c(20, 22, 24, 26, 28)
cbind(empData, age)
empData
#Creating the data frame
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
#Printing the data frame
empData
#Printing the structure
str(empData)
#Printing individual columns
print(empData$id)
print(empData$name)
#Printing individual rows
print(empData[1, ])
print(empData[1:3, ])
#Printing statistical summary
summary(empData)
summary(empData$salary)
#Adding a new row to our data frame
#We use list since every element is of different type, so we cant use c function
nixon <- list(6, "Nixon", 924.30, as.Date("2017-07-15"))
rbind(empData, nixon)
#Adding a new column to our data frame
#Here we can use the c function, since every element is of same type
age <- c(20, 22, 24, 26, 28)
cbind(empData, age)
#Deleting a row in data frame
empData <- empData[-6]
empData
#Deleting a row in data frame
empData <- empData[-1]
empData
#Deleting a row in data frame
empData <- empData[-1]
empData
empData
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
empData
#Deleting a row in data frame
empData <- empData[-1]
empData
empData
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
empData
#Deleting a row in data frame
empData <- empData[-4]
empData
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
# OR #
empData$start_date = NULL
empData
empData
#Deleting a row in data frame
empData <- empData[-1, ]
empData
#Creating the data frame
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
#Printing the length
length(empData)
install.packages("tm")
sms_raw <- read.csv("sms.csv", stringsAsFactors = FALSE)
str(sms_raw)
sms_raw$type <- factor(sms_raw$type)
str(sms_raw$type)
table(sms_raw$type)
#install.packages("tm")
library(tm)
#First step of text mining is to create corpus which is a collection of text documents
#Types of corpus - VCorpus, PCorpus
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
sms_corpus
inspect(sms_corpus[1:2])
as.character(sms_corpus[[1]])
lapply(sms_corpus[1:2], as.character)
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
as.character(sms_corpus[[1]])
as.character(sms_corpus_clean[[1]])
sms_raw <- read.csv("sms.csv", stringsAsFactors = FALSE)
str(sms_raw)
sms_raw$type <- factor(sms_raw$type)
str(sms_raw$type)
table(sms_raw$type)
#install.packages("tm")
library(tm)
#First step of text mining is to create corpus which is a collection of text documents
#Types of corpus - VCorpus, PCorpus
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
sms_corpus
inspect(sms_corpus[1:2])
as.character(sms_corpus[[1]])
lapply(sms_corpus[1:2], as.character)
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
install.packages("SnowballC")
install.packages("SnowballC")
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
sms_raw <- read.csv("sms.csv", stringsAsFactors = FALSE)
str(sms_raw)
sms_raw$type <- factor(sms_raw$type)
str(sms_raw$type)
table(sms_raw$type)
#install.packages("tm")
library(tm)
#First step of text mining is to create corpus which is a collection of text documents
#Types of corpus - VCorpus, PCorpus
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
sms_corpus
inspect(sms_corpus[1:2])
as.character(sms_corpus[[1]])
lapply(sms_corpus[1:2], as.character)
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
# WORD CLOUD CHART
install.packages("wordcloud")
# WORD CLOUD CHART
#install.packages("wordcloud")
install.packages("RColorBrewer")
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
sms_corpus_clean <- tm_map(sms_corpus, enc2utf8(content_transformer(tolower)))
sms_raw <- read.csv("sms.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
str(sms_raw)
sms_raw$type <- factor(sms_raw$type)
str(sms_raw$type)
table(sms_raw$type)
#install.packages("tm")
library(tm)
#First step of text mining is to create corpus which is a collection of text documents
#Types of corpus - VCorpus, PCorpus
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
sms_corpus
inspect(sms_corpus[1:2])
as.character(sms_corpus[[1]])
lapply(sms_corpus[1:2], as.character)
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
as.character(sms_corpus[[1]])
as.character(sms_corpus_clean[[1]])
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
sms_raw <- read.csv("sms.csv", stringsAsFactors = FALSE)
str(sms_raw)
sms_raw$type <- factor(sms_raw$type)
str(sms_raw$type)
table(sms_raw$type)
#install.packages("tm")
library(tm)
#First step of text mining is to create corpus which is a collection of text documents
#Types of corpus - VCorpus, PCorpus
sms_corpus <- VCorpus(VectorSource(sms_raw$text))
sms_corpus
inspect(sms_corpus[1:2])
as.character(sms_corpus[[1]])
lapply(sms_corpus[1:2], as.character)
sms_corpus_clean <- tm_map(sms_corpus, content_transformer(tolower))
#Creating the data frame
manager = c(1, 2, 3, 4, 5)
date = c("01/01/23", "02/02/23", "03/03/23", "04/04/23", "05/05/23")
country = c("US", "UK", "IN", "AU", "FR")
gender = c("M", "F", "F", "M", "F")
age = c(20, 22, 24, 26, 28)
company = data.frame(
manager,
date,
country,
gender,
age
)
#Printing the data frame
company
#Creating the data frame
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
#Printing the data frame
empData
#Printing the structure
str(empData)
#Printing individual columns
print(empData$id)
print(empData$name)
#Printing individual rows
print(empData[1, ])
print(empData[1:3, ])
#Adding a new row to our data frame
#We use list since every element is of different type, so we cant use c function
nixon <- list(6, "Nixon", 924.30, as.Date("2017-07-15"))
rbind(empData, nixon)
#Adding a new column to our data frame
#Here we can use the c function, since every element is of same type
age <- c(20, 22, 24, 26, 28)
cbind(empData, age)
#Deleting a row in data frame
empData <- empData[-1, ]
empData
#Deleting a column in data frame
empData <- empData[-4]
# OR #
empData$start_date = NULL
empData
#Printing the dimension
dim(empData)
#Printing the length
length(empData)
#Printing no. of columns
ncol(empData)
#Printing no. of rows
nrow(empData)
#Printing statistical summary
summary(empData)
summary(empData$salary)
#Creating another data frame having original data frame columns
result = data.frame(
empData$id,
empData$salary
)
#Printing original data frame
print(empData)
#Printing new data frame
print(result)
#First 2 rows
result = empData[1:2]
print(result)
#First 2 dates present in 4th column of empData
result = empData[1:2, 4]
print(result)
#Names with id 2, 3, 4 present in 2nd column of empData
result = empData[2:4, 2]
print(result)
#GETTING DISCRETE VALUES :
result = empData[c(2, 4), c(1, 3)]
print(result)
result = empData[c(1, 5), c(2, 4)]
print(result)
result = empData[c(1, 5), c(2, 4)]
print(result)
#Creating the data frame
manager = c(1, 2, 3, 4, 5)
date = c("01/01/23", "02/02/23", "03/03/23", "04/04/23", "05/05/23")
country = c("US", "UK", "IN", "AU", "FR")
gender = c("M", "F", "F", "M", "F")
age = c(20, 22, 24, 26, 28)
company = data.frame(
manager,
date,
country,
gender,
age
)
#Printing the data frame
company
#Creating the data frame
empData <- data.frame(
id = c(1:5),
name = c("Alex", "John", "Peter", "Michelle", "Gary"),
salary = c(623.30, 587.34, 611.0, 729.54, 843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11", "2015-03-27")),
stringsAsFactors = FALSE
)
#Checking if it is a factor
is.factor(data)
#Data
data = c("East", "West", "East", "North", "North", "East", "West", "West", "West", "East", "North")
#Checking if it is a factor
is.factor(data)
#Factoring the raw data
factoredData <- factor(data)
#No. of categories
nlevels(factoredData)
#Printing factored data
print(factoredData)
#Checking if it is a factor
is.factor(factoredData)
#Creating a custom order
NewOrder <- factor(factoredData, levels = c("North", "East", "West"))
#Printing custom order
print(NewOrder)
#Creating vectors of same size
height <- c(132, 151, 162, 139, 166, 142, 122)
weight <- c(48, 49, 66, 53, 67, 52, 43)
gender <- c("Male", "Male", "Female", "Female", "Male", "Female", "Male")
#Creating the data frame
df <- data.frame(height, weight, gender, stringsAsFactors = FALSE)
#Printing the data frame
print(df)
#Checking if the gender column is a factor
print(is.factor(df$gender))
#Printing the gender column
print(df$gender)
#GL function
#gl(no. of elements to display, no. of times to display)
v <- gl(3, 5, labels = c("California", "Boston", "Seattle"))
print(v)
