# Build the Naive Bayes classifier using training dataset
# The target column is Species
model = naiveBayes(Species~., data = train)
# Make predictions on the testing dataset
pred = predict(model, test)
# Creating a table
table(pred)
# Load the package & dataset
library(e1071)
View(iris)
ir = iris
# Split the dataset into train and a test sets
train = ir[1 : 100 , ]     #100 elements for training
test = ir[101 : 150 , ]    #50 elements for testing
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model = naiveBayes(Species~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred = predict(model, test)
# Creating a table
table(pred)
table(test$Species)
# Load the package & dataset
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Split the dataset into train and a test sets
train = data[1 : 10 , ]     #100 elements for training
test = data[11 : 15 , ]    #50 elements for testing
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model = naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred = predict(model, test)
# Creating a table
table(pred)
table(test$Species)
table(test$play)
table(test$play)
# Load the package & dataset
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into a train and a test set (70% training and 30% testing)
splitIndex <- createDataPartition(datas$play, p = 0.7, list = FALSE)
# Split the dataset into a train and a test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model = naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred = predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Load the package & dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into a train and a test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model = naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred = predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.7)
train <- data[splitIndex, ]
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.7)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
train <- data[splitIndex, ]
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model = naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred = predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model = naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred = predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(test$play, pred)
confusion_matrix
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
confusion_matrix
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model = naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred = predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Step 1: Load the necessary packages
library(caret)
library(e1071)
# Import the "Play Tennis" dataset
play_tennis <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
# Set a seed for reproducibility
set.seed(123)
# Step 2: Split the dataset into a training set and a testing set (70% training and 30% testing)
splitIndex <- createDataPartition(play_tennis$play, p = 0.7, list = FALSE)
training_data <- play_tennis[splitIndex, ]
testing_data <- play_tennis[-splitIndex, ]
# Step 3: Build the Naive Bayes classifier
# 'PlayTennis' is the target variable, and '~ .' specifies to use all other columns as features
nb_model <- naiveBayes(play~., data = training_data)
# Step 4: Make predictions on the testing dataset
predictions <- predict(nb_model, testing_data)
# Step 5: Evaluate the model
# Create a confusion matrix
confusion_matrix <- table(Actual = testing_data$play, Predicted = predictions)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Step 1: Load the necessary packages
library(caret)
library(e1071)
# Import the "Play Tennis" dataset
play_tennis <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
# Set a seed for reproducibility
set.seed(123)
# Step 2: Split the dataset into a training set and a testing set (70% training and 30% testing)
splitIndex <- createDataPartition(play_tennis$play, p = 0.7, list = FALSE)
training_data <- play_tennis[splitIndex, ]
testing_data <- play_tennis[-splitIndex, ]
# Step 3: Build the Naive Bayes classifier
# 'PlayTennis' is the target variable, and '~ .' specifies to use all other columns as features
nb_model <- naiveBayes(play~., data = training_data)
# Step 4: Make predictions on the testing dataset
predictions <- predict(nb_model, testing_data)
# Step 5: Evaluate the model
# Create a confusion matrix
confusion_matrix <- table(Actual = testing_data$play, Predicted = predictions)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.5, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.9, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.8, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.625, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
gc()
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Breast Cancer.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$diagnosis, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(diagnosis~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$diagnosis)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$diagnosis, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Insurance.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$sex, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(diagnosis~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(diagnosis~., data = train)
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(sex~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$sex)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$sex, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Insurance.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$sex, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(sex~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$sex)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$sex, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
# Left-to-Right diagonal of CM contains the correct results
# Right-to-Left diagonal of CM contains the wrong results
# (Accuracy = Total correct results / All the results)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
accuracy <- percent((146+58) / (146+52+144+58))
accuracy
accuracy <- ((146+58) / (146+52+144+58))
accuracy
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
# Left-to-Right diagonal of CM contains the correct results
# Right-to-Left diagonal of CM contains the wrong results
# (Accuracy = Total correct results / All the results)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# This means that, to find accuracy we can also do this :
accuracy <- (1 + 1) / (1 + 0 + 1 + 1)
print(paste("Accuracy:", accuracy))
gc()
