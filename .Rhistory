sum <- sum + ((i^4)/(3+j))
#Rounding sum
sum <- round(sum, digits = 2)
#Printing sum,id
print(paste(sum, paste(i, j, sep = ",")))
}
}
print(sum)
sum = 0
for(i in 1 : 20)
{
for(j in 1 : 5)
{
#Calculating sum
sum <- sum + ((i^4)/(3+j))
#Rounding sum
sum <- round(sum, digits = 2)
#Printing sum,id
print(paste(sum, paste(i, j, sep = ",")))
}
}
#Final sum
print(sum)
cat(sum)
sum = 0
for(i in 1 : 20)
{
for(j in 1 : 5)
{
#Calculating sum
sum <- sum + ((i^4)/(3+j))
#Rounding sum
sum <- round(sum, digits = 2)
#Printing sum,id
print(paste(sum, paste(i, j, sep = ",")))
cat(paste(sum, paste(i, j, sep = ",")))
}
}
#Final sum
print(sum)
#We can also use cat() to remove ""
cat(sum)
sum = 0
for(i in 1 : 20)
{
for(j in 1 : 5)
{
#Calculating sum
sum <- sum + ((i^4)/(3+j))
#Rounding sum
sum <- round(sum, digits = 2)
#Printing sum,id
print(paste(sum, paste(i, j, sep = ",")))
}
}
#Final sum
print(sum)
#We can also use cat() to remove ""
cat(sum)
sum = 0
for(i in 1 : 20)
{
for(j in 1 : 5)
{
#Calculating sum
sum <- sum + ((i^4)/(3+j))
#Rounding sum
sum <- round(sum, digits = 2)
#Printing sum,id
cat(paste(sum, paste(i, j, sep = ",")))
#print(paste(sum, paste(i, j, sep = ",")))
}
}
#Final sum
print(sum)
#We can also use cat() to remove ""
cat(sum)
?cat()
sum = 0
for(i in 1 : 20)
{
for(j in 1 : 5)
{
#Calculating sum
sum <- sum + ((i^4)/(3+j))
#Rounding sum
sum <- round(sum, digits = 2)
#Printing sum,id
cat(paste(sum, paste(i, j, sep = ",")), sep = "\n")
#?cat()
#print(paste(sum, paste(i, j, sep = ",")))
}
}
#Final sum
print(sum)
#We can also use cat() to remove ""
cat(sum)
#Printing sum,id
#print(paste(sum, paste(i, j, sep = ",")))
cat(paste(sum, paste(i, j, sep = ",")), sep = "\n")
sum = 0
for(i in 1 : 20)
{
for(j in 1 : 5)
{
#Calculating sum
sum <- sum + ((i^4)/(3+j))
#Rounding sum
sum <- round(sum, digits = 2)
#Printing sum,id
#print(paste(sum, paste(i, j, sep = ",")))
cat(paste(sum, paste(i, j, sep = ",")), sep = "\n")
}
}
#Final sum
print(sum)
#We can also use cat() to remove ""
#cat(paste(sum, paste(i, j, sep = ",")), sep = "\n")
sum = 0
for(i in 1 : 20)
{
for(j in 1 : 5)
{
#Calculating sum
sum <- sum + ((i^4)/(3+j))
#Rounding sum
sum <- round(sum, digits = 2)
#Printing sum,id
print(paste(sum, paste(i, j, sep = ",")))
}
}
#Final sum
print(sum)
#We can also use cat() to remove ""
#cat(paste(sum, paste(i, j, sep = ",")), sep = "\n")
sum = 0
for(i in 1 : 20)
{
for(j in 1 : 5)
{
#Calculating sum
sum <- sum + ((i^4)/(3+j))
#Rounding sum
sum <- round(sum, digits = 2)
#Printing sum,id
print(paste(sum, paste(i, j, sep = ",")))
}
}
#Final sum
print(sum)
#We can also use cat() to remove ""
#cat(paste(sum, paste(i, j, sep = ",")), sep = "\n")
sum = 0
for(i in 1 : 20)
{
for(j in 1 : 5)
{
#Calculating sum
sum <- sum + ((i^4)/(3+j))
#Rounding sum
#sum <- round(sum, digits = 2)
#Printing sum,id
print(paste(sum, paste(i, j, sep = ",")))
}
}
#Final sum
print(sum)
#We can also use cat() to remove ""
#cat(paste(sum, paste(i, j, sep = ",")), sep = "\n")
#Data
data = c("East", "West", "East", "North", "North", "East", "West", "West", "West", "East", "North")
#Checking if it is a factor
is.factor(data)
#Factoring the raw data
factoredData <- factor(data)
#No. of categories
nlevels(factoredData)
#Printing factored data
print(factoredData)
#Checking if it is a factor
is.factor(factoredData)
#Creating a custom order
NewOrder <- factor(factoredData, levels = c("North", "East", "West"))
#install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
#install.packages("dplyr")
library(dplyr)
#Installing fights dataset :
install.packages("nycflights13")
#Installing fights dataset :
#install.packages("nycflights13")
library(nycflights13)
#Viewing full data
View(flights)
#Viewing first 6 rows
head(flights)
#install.packages("dplyr")
library(dplyr)
#Installing fights dataset :
#install.packages("nycflights13")
library(nycflights13)
#Viewing full data
View(flights)
#Viewing first 6 rows
head(flights)
#select()
ans <- select(flights, flight, origin, dest)
View(ans)
#slice()
slice(flights, 3)
slice(flights, 1:5)
slice(flights, 5:20)
#distinct()
ans <- distinct(flights, origin)
View(ans)
#filter()
ans <- filter(flights, month == 7)
View(ans)
ans <- filter(flights, month == 7, day == 3)
View(ans)
summary(s1)
s1 <- read.csv(file.choose(),stringsAsFactors = TRUE)
summary(s1)
sd(s1$Order.Quantity)
sd(s1$Sales)
sd(s1$Profit)
sd(s1$Unit.Price)
sd(s1$Shipping.Cost)
#Draw a box plot for each numeric variable
bar(nfrow = c(1, 2))
boxplot(s1$Order.Quantity, main="Order Quantity")
boxplot(s1$Profit, main="Profit")
boxplot(s1$Sales, main="Sales")
boxplot(s1$Shipping.Cost, main="Shipping Cost")
boxplot(s1$Unit.Price, main="Unit Price")
par(nfrow = c(1, 1))
barplot(summary(s1$Order.Priority))
#since missing values in s) have been replaced with the mean and max of each variable
#in part , we need to import the dataset again to restore the missing values.
View(s0)
#since missing values in s) have been replaced with the mean and max of each variable
#in part , we need to import the dataset again to restore the missing values.
s0 <- read.csv(file.choose(),stringsAsFactors = TRUE)
View(s0)
summary(s0)
s0$Sales[is.na(s0$Sales)] <- runif(n = sum(is.na(s0$Sales)),
min = min(s0$Sales, na.rm = TRUE),
max = max(s0$Sales, na.rm = TRUE))
s0$Profit[is.na(s0$Profit)] <- runif(n = sum(is.na(s0$Profit)),
min = min(s0$Profit, na.rm = TRUE),
max = max(s0$Profit, na.rm = TRUE))
s0$Unit.Price[is.na(s0$Unit.Price)] <- runif(n = sum(is.na(s0$Unit.Price)),
min = min(s0$Unit.Price, na.rm = TRUE),
max = max(s0$Unit.Price, na.rm = TRUE))
summary(s0)
s0$Order.Priority[is.na(s0$Order.Priority)] <- sample(levels(s0$Order.Priority),
size = sum(is.na(s0$Order.Priority)),
replace = TRUE)
s0$Ship.Mode[is.na(s0$Ship.Mode)] <- sample(levels(s0$Ship.Mode),
size = sum(is.na(s0$Ship.Mode)),
replace = TRUE)
s0$Customer.Name[is.na(s0$Customer.Name)] <- sample(levels(s0$Customer.Name),
size = sum(is.na(s0$Customer.Name)),
replace = TRUE)
summary(s0)
s1 <- read.csv(file.choose(),stringsAsFactors = TRUE)
s1 <- s0
summary(s1)
sd(s1$Order.Quantity)
sd(s1$Sales)
sd(s1$Profit)
sd(s1$Unit.Price)
sd(s1$Shipping.Cost)
#Draw a box plot for each numeric variable
bar(nfrow = c(1, 2))
boxplot(s1$Order.Quantity, main="Order Quantity")
boxplot(s1$Profit, main="Profit")
boxplot(s1$Sales, main="Sales")
boxplot(s1$Shipping.Cost, main="Shipping Cost")
boxplot(s1$Unit.Price, main="Unit Price")
par(nfrow = c(1, 1))
barplot(summary(s1$Order.Priority))
#since missing values in s) have been replaced with the mean and max of each variable
#in part , we need to import the dataset again to restore the missing values.
s0 <- read.csv(file.choose(),stringsAsFactors = TRUE)
#since missing values in s) have been replaced with the mean and max of each variable
#in part , we need to import the dataset again to restore the missing values.
s0 <- read.csv(file.choose(),stringsAsFactors = TRUE)
View(s0)
summary(s0)
s0$Sales[is.na(s0$Sales)] <- runif(n = sum(is.na(s0$Sales)),
min = min(s0$Sales, na.rm = TRUE),
max = max(s0$Sales, na.rm = TRUE))
s0$Profit[is.na(s0$Profit)] <- runif(n = sum(is.na(s0$Profit)),
min = min(s0$Profit, na.rm = TRUE),
max = max(s0$Profit, na.rm = TRUE))
s0$Unit.Price[is.na(s0$Unit.Price)] <- runif(n = sum(is.na(s0$Unit.Price)),
min = min(s0$Unit.Price, na.rm = TRUE),
max = max(s0$Unit.Price, na.rm = TRUE))
summary(s0)
s0$Order.Priority[is.na(s0$Order.Priority)] <- sample(levels(s0$Order.Priority),
size = sum(is.na(s0$Order.Priority)),
replace = TRUE)
s0$Ship.Mode[is.na(s0$Ship.Mode)] <- sample(levels(s0$Ship.Mode),
size = sum(is.na(s0$Ship.Mode)),
replace = TRUE)
s0$Customer.Name[is.na(s0$Customer.Name)] <- sample(levels(s0$Customer.Name),
size = sum(is.na(s0$Customer.Name)),
replace = TRUE)
summary(s0)
s1 <- s0
summary(s1)
sd(s1$Order.Quantity)
sd(s1$Sales)
sd(s1$Profit)
sd(s1$Unit.Price)
sd(s1$Shipping.Cost)
#Draw a box plot for each numeric variable
bar(nfrow = c(1, 2))
boxplot(s1$Order.Quantity, main="Order Quantity")
#Draw a box plot for each numeric variable
bar(nfrow = c(1, 2))
boxplot(s1$Order.Quantity, main="Order Quantity")
boxplot(s1$Profit, main="Profit")
boxplot(s1$Sales, main="Sales")
library(diamonds)
diamonds
library(ggplot2)
#Load Dataset
df <- data("iris")
head(iris)
ran<- sample(1:nrow(iris),0.9 * nrow(iris))
str(iris)
range(iris$Sepal.Length)
range(iris$Petal.Width)
nor <- function(x){ (x-min(x))/(max(x)-min(x))}
# run the normalization on first 4 columns of dataset because they are the predicators
iris_norm <- as.data.frame(lapply(iris[,c(1,2,3,4)],nor))
summary(iris)
summary(iris_norm)
iris_train <- iris_norm[ran,]
## extracting testing set
iris_test<- iris_norm[-ran,]
iris_target_catgory <- iris[ran,5]
iris_test_catgory <- iris[-ran,5]
##load the package class
library(class)
?knn
#run knn function
pr <- knn(iris_train,iris_test,cl=iris_target_catgory,k=10)
tab<-table(pr,iris_test_catgory)
accuracy <- function(x){sum(diag(x))/sum(rowSums(x))*100}
accuracy(tab)
#Load Dataset
df <- data("diamonds")
#See the structure
head(diamonds)
library(ggplot)
data("diamonds")
library(ggplot2)
data("diamonds")
dia <- data.frame(diamonds)
library(ggplot2)
data("diamonds")
dia <- data.frame(diamonds)
summary(diamonds)
str(diamonds)
getw()
getw
getwd()
data <- read.csv("Breast Cancer Dataset.csv")
data
print(data)
print(data)
is.na(data)
if (is.na(data) == TRUE) {
print("NA")
} else {
print("No NA")
}
if (is.na(data) = TRUE) {
is.na(data)
#Printing the dataset
print(data)
remove(data.id)
print(data$id)
delete(data$id)
remove(data$id)
print(data$diagnosis)
if (data$diagnosis == "M") {
"Male"
} else {
"Female"
}
# Use if...else to replace values in the "diagnosis" column
data$diagnosis <- ifelse(data$diagnosis == "M", "Male", ifelse(data$diagnosis == "F", "Female", data$diagnosis))
# Write the modified data frame back to a CSV file
write.csv(data, "modified_file.csv", row.names = FALSE)
print(data)
getwd()
#Loading the dataset
data <- read.csv("Breast Cancer Dataset.csv")
#Printing the dataset
print(data)
#Checking if there are NAs
is.na(data)
print(data$diagnosis)
# Use if...else to replace values in the "diagnosis" column
data$diagnosis <- ifelse(data$diagnosis == "M", "Male", ifelse(data$diagnosis == "F", "Female", data$diagnosis))
# Write the modified data frame back to a CSV file
write.csv(data, "Breast Cancer Dataset Modified.csv", row.names = FALSE)
print(data)
#Loading the dataset
data <- read.csv("Breast Cancer Dataset.csv")
#Printing the dataset
print(data)
#Checking if there are NAs
is.na(data)
#Deleting id column
data <- subset(data, select = -data$id)
data$diagnosis <- as.factor(data$diagnosis)
levels(data$diagnosis) <- c("Malignant", "Benign")
#Write the modified data frame back to a CSV file
write.csv(data, "Breast Cancer Dataset Modified.csv", row.names = FALSE)
print(data)
#Loading the dataset
data <- read.csv("Breast Cancer Dataset.csv")
#Printing the dataset
print(data)
#Checking if there are NAs
is.na(data)
#Deleting id column
data <- data[-1]
data$diagnosis <- as.factor(data$diagnosis)
levels(data$diagnosis) <- c("Malignant", "Benign")
data$diagnosis <- ifelse(data$diagnosis == "M", "Male", ifelse(data$diagnosis == "F", "Female", data$diagnosis))
#Loading the dataset
data <- read.csv("Breast Cancer Dataset.csv")
#Printing the dataset
print(data)
#Checking if there are NAs
is.na(data)
#Deleting id column
data <- data[-1]
data$diagnosis <- as.factor(data$diagnosis)
levels(data$diagnosis) <- c("Malignant", "Benign")
#Write the modified data frame back to a CSV file
write.csv(data, "Breast Cancer Dataset Modified.csv", row.names = FALSE)
print(data)
#Loading the dataset
data <- read.csv("Breast Cancer Dataset.csv")
#Printing the dataset
print(data)
#Checking if there are NAs
is.na(data)
#Deleting id column
data <- data[-1]
data$diagnosis <- as.factor(data$diagnosis)
levels(data$diagnosis) <- c("Benign", "Malignant")
#Write the modified data frame back to a CSV file
write.csv(data, "Breast Cancer Dataset Modified.csv", row.names = FALSE)
#Loading the dataset
data <- read.csv("Breast Cancer Dataset.csv")
#Printing the dataset
print(data)
#Checking if there are NAs
is.na(data)
#Deleting id column
data <- data[-1]
#Replacing values in the diagnosis column
data$diagnosis <- as.factor(data$diagnosis)
levels(data$diagnosis) <- c("Benign", "Malignant")
#Writing the modified data back to a CSV file
write.csv(data, "Breast Cancer Dataset Modified.csv", row.names = FALSE)
#Loading the dataset
data <- read.csv("Breast Cancer Dataset.csv")
#Printing the dataset
print(data)
#Checking if there are NAs
is.na(data)
#Deleting id column
data <- data[-1]
#Replacing values in the diagnosis column
data$diagnosis <- as.factor(data$diagnosis)
levels(data$diagnosis) <- c("Benign", "Malignant")
#Writing the modified data back to a CSV file
write.csv(data, "Breast Cancer Dataset Modified.csv", row.names = FALSE)
round(prop.table(table(data$diagnosis)) * 100, digits = 1)
summary(data[c("radius_mean", "area_mean", "smoothness_mean")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
data_n <- as.data.frame(lapply(data[2 : 31], normalize))
summary(data_n$area_mean)
data_train <- data_n[1 : 469, ]
data_test <- data_n[470 : 569, ]
data_train_labels <- data[1 : 469, 1]
data_test_labels <- data[470 : 569, 1]
#install.packages("class")
library(class)
data_test_pred <- knn(train = data_train, test = data_test,
c1 = data_train_labels, k = 21)
data_test_pred <- knn(train = data_train, test = data_test,
cl = data_train_labels, k = 21)
#install.packages("gmodels")
library(gmodels)
CrossTable(x = data_test_labels , y = data_test_pred,
prop.chisq = FALSE)
aa <- table(data_test_labels, data_test_pred)
library(caret)
confusionMatrix(aa)
