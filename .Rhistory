print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.9, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.8, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.625, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
gc()
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Breast Cancer.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$diagnosis, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(diagnosis~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$diagnosis)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$diagnosis, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Insurance.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$sex, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(diagnosis~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(diagnosis~., data = train)
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(sex~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$sex)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$sex, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Insurance.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$sex, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(sex~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$sex)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$sex, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
# Left-to-Right diagonal of CM contains the correct results
# Right-to-Left diagonal of CM contains the wrong results
# (Accuracy = Total correct results / All the results)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
accuracy <- percent((146+58) / (146+52+144+58))
accuracy
accuracy <- ((146+58) / (146+52+144+58))
accuracy
# Load the packages & the dataset
library(caret)
library(e1071)
data <- read.csv("Play Tennis.csv", stringsAsFactors = FALSE)
View(data)
# Set a seed for reproducibility
set.seed(123)
# Split the dataset into train and test set (70% training and 30% testing)
splitIndex <- createDataPartition(data$play, p = 0.7, list = FALSE)
train <- data[splitIndex, ]
test <- data[-splitIndex, ]
# Build the Naive Bayes classifier using training dataset
# The target column is Species
# naiveBayes(target_column, train_file)
model <- naiveBayes(play~., data = train)
# Make predictions on the testing dataset
# predict(model, test_file)
pred <- predict(model, test)
# Creating a table
table(pred)
table(test$play)
# Building a confusion matrix
# ConfusionMatrix(original_data, predicted_data)
confusion_matrix <- table(Actual = test$play, Predicted = pred)
print("Confusion Matrix:")
print(confusion_matrix)
# Calculate accuracy
# Left-to-Right diagonal of CM contains the correct results
# Right-to-Left diagonal of CM contains the wrong results
# (Accuracy = Total correct results / All the results)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
print(paste("Accuracy:", accuracy))
# This means that, to find accuracy we can also do this :
accuracy <- (1 + 1) / (1 + 0 + 1 + 1)
print(paste("Accuracy:", accuracy))
gc()
# Load the required libraries
library(rpart)
library(rpart.plot)
# Load the Iris dataset
data(iris)
# Create a decision tree model
# rpart(WHAT TO PREDICT ~ INPUT COLUMNS(+), data = DATASET)
# rpart(DEPENDENT VARIABLE ~ INDEPENDENT VARIABLES)
tree <- rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris,
method = "class")
tree
# Plot the decision tree using rpart.plot
rpart.plot(tree, main = "Decision Tree", under = TRUE, tweak = 1.2)
# Make predictions on new data
new_data <- data.frame(Sepal.Length = 5.0, Sepal.Width = 3.5, Petal.Length = 1.5, Petal.Width = 0.2)
prediction <- predict(tree, new_data, type = "class")
# Display the predicted class
print(prediction)
prediction <- predict(tree, new_data)
# Display the predicted class
print(prediction)
# Create a confusion matrix
cm <- table(Predicted = prediction, Actual = Species)
# Load the required libraries
library(rpart)
library(rpart.plot)
# Load the Iris dataset
data(iris)
# Create a decision tree model
# rpart(WHAT TO PREDICT ~ INPUT COLUMNS(+), data = DATASET)
# rpart(DEPENDENT VARIABLE ~ INDEPENDENT VARIABLES)
tree <- rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris,
method = "class")
tree
# Plot the decision tree
rpart.plot(tree,
main = "Decision Tree",
tweak = 1.2,
under = TRUE)
# Make predictions on new data
new_data <- data.frame(Sepal.Length = 5.0, Sepal.Width = 3.5, Petal.Length = 1.5, Petal.Width = 0.2)
prediction <- predict(tree, new_data)
# Display the predicted class
print(prediction)
# Create a confusion matrix
cm <- table(Predicted = prediction, Actual = Species)
# Create a confusion matrix
cm <- table(Predicted = prediction, Actual = iris$Species)
library(rpart)
library(rpart.plot)
# Load the Iris dataset
data(iris)
# Create a decision tree model
# rpart(WHAT TO PREDICT ~ INPUT COLUMNS(+), data = DATASET)
# rpart(DEPENDENT VARIABLE ~ INDEPENDENT VARIABLES)
tree <- rpart(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,
data = iris,
method = "class")
tree
plot(tree)
?rpart.plot
#Loading the dataset
data <- read.csv("Lungcap.csv")
View(data)
plot(data$Age, data$Smoke)
plot(data$Age, data$LungCap)
plot(data$LungCap, data$Age)
result <- lm(data$Caesarean ~., data = data, method = "class")
plot(result)
result <- lm(data$Caesarean ~., data = data, method = "class")
result <- lm(data$Caesarean ~., data = data)
result <- lm(data$Caesarean ~., data = data)
#Loading the dataset
data <- read.csv("Lungcap.csv")
na.omit(data)
View(data)
plot(data$LungCap, data$Age)
result <- lm(data$Caesarean ~., data = data)
plot(result)
result <- lm(data$Caesarean ~ data$LungCap, data = data)
plot(result)
plot(result, 1)
#Loading the dataset
data <- read.csv("Lungcap.csv")
attach(data)
names(data)
summary(data)
View(data)
str(data)
class(data$Age)
plot(Age, LungCap, main = "scatterplot")
?lm
linearModel = lm(LungCap~Age)
summary(linearModel)
plot(Age, LungCap, main = "scatterplot")
abline(linearModel, col=2, lwd=3)
checkLungs = data.frame(Age = 10)
result = predict(linearModel, checkLungs)
result
#Loading the dataset
data <- read.csv("Lungcap.csv")
View(data)
plot(Age, LungCap)
linearModel = lm(LungCap~Age)
summary(linearModel)
plot(Age, LungCap, main = "scatterplot")
plot(linearModel)
#Loading the dataset
data <- read.csv("Lungcap.csv")
View(data)
plot(Age, LungCap)
?lm
linearModel = lm(LungCap~Age)
plot(linearModel)
names(data)
names(data)
attach(data)
#Loading the dataset
data <- read.csv("Lungcap.csv")
names(data)
View(data)
plot(Age, LungCap, main = "scatterplot")
?lm
linearModel = lm(LungCap~Age)
summary(linearModel)
plot(Age, LungCap, main = "scatterplot")
abline(linearModel, col=2, lwd=3)
checkLungs = data.frame(Age = 10)
result = predict(linearModel, checkLungs)
result
result
#Loading the dataset
data <- read.csv("Lungcap.csv")
View(data)
plot(LungCap, Age)
result <- lm(Caesarean ~ ., data = data)
plot(result)
#Loading the dataset
data <- read.csv("Lungcap.csv")
#Loading the dataset
data <- read.csv("Lungcap.csv")
names(data)
View(data)
plot(Age, LungCap, main = "scatterplot")
?lm
linearModel = lm(LungCap~Age)
summary(linearModel)
#Loading the dataset
data <- read.csv("Lungcap.csv")
names(data)
#Loading the dataset
data <- read.csv("Lungcap.csv")
names(data)
View(data)
plot(Age, LungCap, main = "scatterplot")
?lm
linearModel = lm(LungCap~Age)
plot(Age, LungCap, main = "scatterplot")
abline(linearModel, col=2, lwd=3)
checkLungs = data.frame(Age = 10)
result = predict(linearModel, checkLungs)
result
#Loading the dataset
data <- read.csv("Lungcap.csv")
names(data)
View(data)
plot(Age, LungCap)
?lm
linearModel = lm(LungCap~Age)
plot(Age, LungCap)
abline(linearModel, col=2, lwd=3)
checkLungs = data.frame(Age = 10)
result = predict(linearModel, checkLungs)
result
# Independent variable (Weight)
y <- c(63, 66, 69, 72, 75, 78, 75, 72, 69, 66)
# Dependent variable
x <- c(5.1, 5.5, 5.8, 6.1, 6.4, 6.7, 6.4, 6.1, 5.10, 5.7)
# Apply the lm() function
relation <- lm(y ~ x)
relation
summary(relation)
# Find wight of a person with height 6.3
test <- data.frame(x = 6.3)
ans <- predict(relation, test)
ans
paste("Weight :", ans)
paste0("Weight :", ans)
#Loading the dataset
data <- read.csv("Lungcap.csv")
names(data)
View(data)
plot(Age, LungCap)
?lm
linearModel = lm(LungCap~Age)
plot(Age, LungCap)
abline(linearModel, col=2, lwd=3)
checkLungs = data.frame(Age = 10)
result = predict(linearModel, checkLungs)
result
#Loading the dataset
data <- read.csv("Lungcap.csv")
names(data)
View(data)
plot(Age, LungCap)
?lm
relation = lm(LungCap~Age)
plot(Age, LungCap)
abline(relation, col=2, lwd=3)
test <- data.frame(Age = 10)
ans <- predict(relation, test)
paste("LungCap :", ans)
test <- data.frame(Age = 70)
ans <- predict(relation, test)
paste("LungCap :", ans)
View(data)
test <- data.frame(Age = 40)
ans <- predict(relation, test)
paste("LungCap :", ans)
test <- data.frame(Age = 30)
ans <- predict(relation, test)
paste("LungCap :", ans)
test <- data.frame(Age = 50)
ans <- predict(relation, test)
paste("LungCap :", ans)
plot(x, y)
# Dependent variable (Weight)
y <- c(63, 66, 69, 72, 75, 78, 75, 72, 69, 66)
# Independent variable (Height)
x <- c(5.1, 5.5, 5.8, 6.1, 6.4, 6.7, 6.4, 6.1, 5.10, 5.7)
plot(x, y)
# Apply the lm() function
relation <- lm(y ~ x)
summary(relation)
# Find wight of a person with height 6.3
test <- data.frame(x = 6.3)
ans <- predict(relation, test)
paste("Weight :", ans)
plot(y, x)
#Loading the dataset
data <- read.csv("Lungcap.csv")
names(data)
plot(Age, LungCap)
?lm
model = lm(LungCap ~ Age, data = data)
plot(Age, LungCap)
abline(model, col=2, lwd=3)
test <- data.frame(Age = 50)
ans <- predict(model, test)
paste("LungCap :", ans)
library(ggplot2)
data("Airquality")
data(Airquality)
data("Airquality")
library(ggplot2)
data("Airquality")
data <- read.csv("Lungcap.csv")
View(data)
summary(data)
data <- data[ , -1]
?lm
?abline
#Handling NA's
data$LungCap[is.na(data$LungCap)] <- mean(data$LungCap, na.rm = T)
data$Age[is.na(data$Age)] <- mean(data$Age, na.rm = T)
data$Height[is.na(data$Height)] <- mean(data$Height, na.rm = T)
#Normalization
normalize <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
data_nor <- as.data.frame(lapply(data[ , c(1, 2, 3)], normalize))
summary(data_nor)
plot(Age, LungCap)
model <- lm(LungCap ~ Age)
summary(model)
abline(model, col=2, lwd=3)
